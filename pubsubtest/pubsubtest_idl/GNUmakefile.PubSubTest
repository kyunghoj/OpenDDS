# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.PubSubTest
#
# $Id: gnu.mpd 2866 2016-09-08 21:53:48Z huangh $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.PubSubTest
DEPENDENCY_FILE  = .depend.PubSubTest

IDL_DEPENDENCY_FILE1 = .depend.PubSubTest_Idl1
IDL_DEPENDENCY_FILE2 = .depend.PubSubTest_Idl2

IDL_DEPENDENCY_FILES += \
	.depend.PubSubTest_Idl1 \
	.depend.PubSubTest_Idl2

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)PubSubTest.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)PubSubTest

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)PubSubTest.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  PubSubTestTypeSupportC.cpp \
  PubSubTestC.cpp \
  PubSubTestTypeSupportImpl.cpp \
  PubSubTestTypeSupportJC.cpp \
  PubSubTestJC.cpp \
  PubSubTestTypeSupportS.cpp \
  PubSubTestS.cpp

IDL_DEPS_FLAGS1 = -DGEN_IDL_MAKE_DEPS
IDL_DEPS1 = PubSubTestTypeSupport.idl

IDL_DEPS_FLAGS2 = -DGEN_IDL_MAKE_DEPS
IDL_DEPS2 = PubSubTest.idl



LIBPATHS := . "$(ACE_ROOT)/lib" "$(DDS_ROOT)/lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lOpenDDS_DCPS_Java -ltao_java -lidl2jni_runtime -lOpenDDS_Dcps -lTAO_BiDirGIOP -lTAO_PI -lTAO_CodecFactory -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/PubSubTest
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,OpenDDS_DCPS_Java tao_java idl2jni_runtime OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) $(DDS_ROOT)/lib $(if $(ARCH),$(DDS_ROOT)/lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),OpenDDS_DCPS_Java tao_java idl2jni_runtime OpenDDS_Dcps TAO_BiDirGIOP TAO_PI TAO_CodecFactory TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(java),1)
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif

ifeq ($(java),1)
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L$(DDS_ROOT)/lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L$(DDS_ROOT)/lib $(if $(ARCH),-L$(DDS_ROOT)/lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I$(DDS_ROOT) -I$(DDS_ROOT)/java/idl2jni/runtime -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/$(JAVA_PLATFORM) -I$(DDS_ROOT)/java -I$(DDS_ROOT)/dds
CPPFLAGS     += -DNOMINMAX
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DPUBSUBTEST_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo PubSubTest will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(java),1)
requires_disabled_macros += java
endif
require_warning:
	@echo PubSubTest will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += PubSubTestTypeSupportS.h PubSubTestTypeSupportC.h PubSubTestTypeSupportC.inl PubSubTestTypeSupportC.cpp PubSubTestTypeSupportS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTestTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTestTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTestTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTestTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTestTypeSupportS.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestTypeSupportS.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PubSubTestTypeSupportS.h PubSubTestTypeSupportC.h PubSubTestTypeSupportC.inl PubSubTestTypeSupportC.cpp PubSubTestTypeSupportS.cpp: PubSubTestTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -I$(DDS_ROOT) -Wb,stub_export_include=PubSubTest_Export.h -Wb,stub_export_macro=PubSubTest_Export PubSubTestTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
PubSubTestTypeSupportS.h PubSubTestTypeSupportC.h PubSubTestTypeSupportC.inl PubSubTestTypeSupportC.cpp PubSubTestTypeSupportS.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += PubSubTestS.h PubSubTestC.h PubSubTestC.inl PubSubTestC.cpp PubSubTestS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestS.h" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestC.h" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestC.inl" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestC.cpp" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestS.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "PubSubTestS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "PubSubTestS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "PubSubTestS.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PubSubTestS.h PubSubTestC.h PubSubTestC.inl PubSubTestC.cpp PubSubTestS.cpp: PubSubTest.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -I$(DDS_ROOT) -Wb,stub_export_include=PubSubTest_Export.h -Wb,stub_export_macro=PubSubTest_Export PubSubTest.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
PubSubTestS.h PubSubTestC.h PubSubTestC.inl PubSubTestC.cpp PubSubTestS.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += PubSubTestTypeSupport.idl PubSubTestTypeSupportImpl.h PubSubTest/MsgTypeSupportImpl.java PubSubTestTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTest/MsgTypeSupportImpl.java" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "PubSubTestTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "PubSubTestTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "PubSubTest/MsgTypeSupportImpl.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "PubSubTestTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(DDS_ROOT)/dds/idl/IDLTemplate.txt)" -nt "PubSubTestTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(DDS_ROOT)/dds/idl/IDLTemplate.txt)" -nt "PubSubTestTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(DDS_ROOT)/dds/idl/IDLTemplate.txt)" -nt "PubSubTest/MsgTypeSupportImpl.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(DDS_ROOT)/dds/idl/IDLTemplate.txt)" -nt "PubSubTestTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PubSubTestTypeSupport.idl PubSubTestTypeSupportImpl.h PubSubTest/MsgTypeSupportImpl.java PubSubTestTypeSupportImpl.cpp: PubSubTest.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(DDS_ROOT)/dds/idl/IDLTemplate.txt))
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,java -Wb,stub_export_macro=PubSubTest_Export PubSubTest.idl


GENERATED_DIRTY += classes/PubSubTest/MsgSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgSeqHolder.class: PubSubTest/MsgSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgSeqHolder.java


GENERATED_DIRTY += classes/PubSubTest/MsgSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgSeqHelper.class: PubSubTest/MsgSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgSeqHelper.java


GENERATED_DIRTY += classes/PubSubTest/MsgTypeSupport.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgTypeSupport.class: PubSubTest/MsgTypeSupport.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgTypeSupport.java


GENERATED_DIRTY += classes/PubSubTest/MsgTypeSupportHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgTypeSupportHolder.class: PubSubTest/MsgTypeSupportHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgTypeSupportHolder.java


GENERATED_DIRTY += classes/PubSubTest/MsgTypeSupportHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgTypeSupportHelper.class: PubSubTest/MsgTypeSupportHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgTypeSupportHelper.java


GENERATED_DIRTY += classes/PubSubTest/MsgTypeSupportOperations.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgTypeSupportOperations.class: PubSubTest/MsgTypeSupportOperations.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgTypeSupportOperations.java


GENERATED_DIRTY += classes/PubSubTest/_MsgTypeSupportLocalBase.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/_MsgTypeSupportLocalBase.class: PubSubTest/_MsgTypeSupportLocalBase.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/_MsgTypeSupportLocalBase.java


GENERATED_DIRTY += classes/PubSubTest/_MsgTypeSupportTAOPeer.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/_MsgTypeSupportTAOPeer.class: PubSubTest/_MsgTypeSupportTAOPeer.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/_MsgTypeSupportTAOPeer.java


GENERATED_DIRTY += classes/PubSubTest/MsgDataWriter.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgDataWriter.class: PubSubTest/MsgDataWriter.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgDataWriter.java


GENERATED_DIRTY += classes/PubSubTest/MsgDataWriterHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgDataWriterHolder.class: PubSubTest/MsgDataWriterHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgDataWriterHolder.java


GENERATED_DIRTY += classes/PubSubTest/MsgDataWriterHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgDataWriterHelper.class: PubSubTest/MsgDataWriterHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgDataWriterHelper.java


GENERATED_DIRTY += classes/PubSubTest/MsgDataWriterOperations.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgDataWriterOperations.class: PubSubTest/MsgDataWriterOperations.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgDataWriterOperations.java


GENERATED_DIRTY += classes/PubSubTest/_MsgDataWriterLocalBase.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/_MsgDataWriterLocalBase.class: PubSubTest/_MsgDataWriterLocalBase.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/_MsgDataWriterLocalBase.java


GENERATED_DIRTY += classes/PubSubTest/_MsgDataWriterTAOPeer.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/_MsgDataWriterTAOPeer.class: PubSubTest/_MsgDataWriterTAOPeer.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/_MsgDataWriterTAOPeer.java


GENERATED_DIRTY += classes/PubSubTest/MsgDataReader.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgDataReader.class: PubSubTest/MsgDataReader.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgDataReader.java


GENERATED_DIRTY += classes/PubSubTest/MsgDataReaderHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgDataReaderHolder.class: PubSubTest/MsgDataReaderHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgDataReaderHolder.java


GENERATED_DIRTY += classes/PubSubTest/MsgDataReaderHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgDataReaderHelper.class: PubSubTest/MsgDataReaderHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgDataReaderHelper.java


GENERATED_DIRTY += classes/PubSubTest/MsgDataReaderOperations.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgDataReaderOperations.class: PubSubTest/MsgDataReaderOperations.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgDataReaderOperations.java


GENERATED_DIRTY += classes/PubSubTest/_MsgDataReaderLocalBase.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/_MsgDataReaderLocalBase.class: PubSubTest/_MsgDataReaderLocalBase.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/_MsgDataReaderLocalBase.java


GENERATED_DIRTY += classes/PubSubTest/_MsgDataReaderTAOPeer.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/_MsgDataReaderTAOPeer.class: PubSubTest/_MsgDataReaderTAOPeer.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/_MsgDataReaderTAOPeer.java


GENERATED_DIRTY += classes/PubSubTest/Msg.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/Msg.class: PubSubTest/Msg.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/Msg.java


GENERATED_DIRTY += classes/PubSubTest/MsgHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgHolder.class: PubSubTest/MsgHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgHolder.java


GENERATED_DIRTY += classes/PubSubTest/MsgHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgHelper.class: PubSubTest/MsgHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgHelper.java


GENERATED_DIRTY += classes/PubSubTest/MsgTypeSupportImpl.class
OBJS_DEPEND_ON_GENERATED = 1
classes/PubSubTest/MsgTypeSupportImpl.class: PubSubTest/MsgTypeSupportImpl.java PubSubTest/_MsgTypeSupportTAOPeer.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) $(DDS_ROOT)/java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -implicit:none -classpath $(DDS_ROOT)/lib/i2jrt.jar -classpath $(DDS_ROOT)/lib/OpenDDS_DCPS.jar PubSubTest/MsgTypeSupportImpl.java


DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += PubSubTestTypeSupportJC.h PubSubTest/MsgSeqHolder.java PubSubTest/MsgSeqHelper.java PubSubTest/MsgTypeSupport.java PubSubTest/MsgTypeSupportHolder.java PubSubTest/MsgTypeSupportHelper.java PubSubTest/MsgTypeSupportOperations.java PubSubTest/_MsgTypeSupportLocalBase.java PubSubTest/_MsgTypeSupportTAOPeer.java PubSubTest/MsgDataWriter.java PubSubTest/MsgDataWriterHolder.java PubSubTest/MsgDataWriterHelper.java PubSubTest/MsgDataWriterOperations.java PubSubTest/_MsgDataWriterLocalBase.java PubSubTest/_MsgDataWriterTAOPeer.java PubSubTest/MsgDataReader.java PubSubTest/MsgDataReaderHolder.java PubSubTest/MsgDataReaderHelper.java PubSubTest/MsgDataReaderOperations.java PubSubTest/_MsgDataReaderLocalBase.java PubSubTest/_MsgDataReaderTAOPeer.java PubSubTestTypeSupportJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTestTypeSupportJC.h" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgSeqHolder.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgSeqHelper.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgTypeSupport.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgTypeSupportHolder.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgTypeSupportHelper.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgTypeSupportOperations.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/_MsgTypeSupportLocalBase.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/_MsgTypeSupportTAOPeer.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgDataWriter.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgDataWriterHolder.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgDataWriterHelper.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgDataWriterOperations.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/_MsgDataWriterLocalBase.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/_MsgDataWriterTAOPeer.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgDataReader.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgDataReaderHolder.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgDataReaderHelper.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/MsgDataReaderOperations.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/_MsgDataReaderLocalBase.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTest/_MsgDataReaderTAOPeer.java" 2> /dev/null || $(TEST_EXE) "PubSubTestTypeSupport.idl" -nt "PubSubTestTypeSupportJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTestTypeSupportJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgTypeSupport.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgTypeSupportHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgTypeSupportHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgTypeSupportOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/_MsgTypeSupportLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/_MsgTypeSupportTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgDataWriter.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgDataWriterHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgDataWriterHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgDataWriterOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/_MsgDataWriterLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/_MsgDataWriterTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgDataReader.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgDataReaderHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgDataReaderHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgDataReaderOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/_MsgDataReaderLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/_MsgDataReaderTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTestTypeSupportJC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTestTypeSupportJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgTypeSupport.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgTypeSupportHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgTypeSupportHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgTypeSupportOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/_MsgTypeSupportLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/_MsgTypeSupportTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgDataWriter.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgDataWriterHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgDataWriterHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgDataWriterOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/_MsgDataWriterLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/_MsgDataWriterTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgDataReader.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgDataReaderHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgDataReaderHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/MsgDataReaderOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/_MsgDataReaderLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTest/_MsgDataReaderTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,PubSubTest/Msg.java)" -nt "PubSubTestTypeSupportJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PubSubTestTypeSupportJC.h PubSubTest/MsgSeqHolder.java PubSubTest/MsgSeqHelper.java PubSubTest/MsgTypeSupport.java PubSubTest/MsgTypeSupportHolder.java PubSubTest/MsgTypeSupportHelper.java PubSubTest/MsgTypeSupportOperations.java PubSubTest/_MsgTypeSupportLocalBase.java PubSubTest/_MsgTypeSupportTAOPeer.java PubSubTest/MsgDataWriter.java PubSubTest/MsgDataWriterHolder.java PubSubTest/MsgDataWriterHelper.java PubSubTest/MsgDataWriterOperations.java PubSubTest/_MsgDataWriterLocalBase.java PubSubTest/_MsgDataWriterTAOPeer.java PubSubTest/MsgDataReader.java PubSubTest/MsgDataReaderHolder.java PubSubTest/MsgDataReaderHelper.java PubSubTest/MsgDataReaderOperations.java PubSubTest/_MsgDataReaderLocalBase.java PubSubTest/_MsgDataReaderTAOPeer.java PubSubTestTypeSupportJC.cpp: PubSubTestTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(IDL2JNI_DEP))) $(call ADD_ARCH,PubSubTest/Msg.java)
	$(if $(findstring ",$(IDL2JNI)),$(IDL2JNI),$(call ADD_QUOTE,$(call ADD_ARCH,$(IDL2JNI)))) -Wb,native_lib_name=PubSubTest -SS -I$(DDS_ROOT) -I$(TAO_ROOT) -Wb,stub_export_include=PubSubTest_Export.h -Wb,stub_export_macro=PubSubTest_Export PubSubTestTypeSupport.idl


GENERATED_DIRTY += PubSubTestJC.h PubSubTest/Msg.java PubSubTest/MsgHolder.java PubSubTest/MsgHelper.java PubSubTestJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestJC.h" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTest/Msg.java" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTest/MsgHolder.java" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTest/MsgHelper.java" 2> /dev/null || $(TEST_EXE) "PubSubTest.idl" -nt "PubSubTestJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTestJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/Msg.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTest/MsgHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(IDL2JNI_DEP))" -nt "PubSubTestJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
PubSubTestJC.h PubSubTest/Msg.java PubSubTest/MsgHolder.java PubSubTest/MsgHelper.java PubSubTestJC.cpp: PubSubTest.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(IDL2JNI_DEP)))
	$(if $(findstring ",$(IDL2JNI)),$(IDL2JNI),$(call ADD_QUOTE,$(call ADD_ARCH,$(IDL2JNI)))) -Wb,native_lib_name=PubSubTest -SS -I$(DDS_ROOT) -I$(TAO_ROOT) -Wb,stub_export_include=PubSubTest_Export.h -Wb,stub_export_macro=PubSubTest_Export PubSubTest.idl


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += PubSubTestTypeSupport$(IDL_CLIENT_HDR_EXT) PubSubTest$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = PubSubTestTypeSupportC.cpp PubSubTestC.cpp PubSubTestTypeSupportImpl.cpp PubSubTestTypeSupportJC.cpp PubSubTestJC.cpp PubSubTestTypeSupportS.cpp PubSubTestS.cpp  
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubSubTestTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubSubTestTypeSupportS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubSubTestC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubSubTestS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubSubTestTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubSubTestTypeSupportJC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:PubSubTestJC.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

incremental_depend_idl::
	@$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old
	@cp $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE1) \
	$(IDL_DEPS_FLAGS1) -t gnuidl -DMAKEDEPEND $(IDL_DEPS1)
	@if cmp -s $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS1)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS1)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old
	@cp $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE2) \
	$(IDL_DEPS_FLAGS2) -t gnuidl -DMAKEDEPEND $(IDL_DEPS2)
	@if cmp -s $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS2)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS2)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old ;

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif
	-rm -rf classes ; rm -rf ./DDS_PubSubTest_types.jar

__prebuild__:
ifeq ($(java),1)
	@mkdir -p classes 2> /dev/null || cat /dev/null > /dev/null
endif

all: __postbuild__

__postbuild__: $(VLIBS)

__postbuild__:
ifeq ($(java),1)
	@"$(JAVA_HOME)/bin/jar" -cf ./DDS_PubSubTest_types.jar -C classes .
endif


.PHONY: install
install: __postbuild__
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


